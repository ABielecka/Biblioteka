// <auto-generated />
using System;
using Biblioteka.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace Biblioteka.Database.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20211224195744_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biblioteka.Core.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("CITY");

                    b.Property<int>("Number")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("NVARCHAR2(6)")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("STREET");

                    b.HasKey("Id");

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("Biblioteka.Core.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AUTHOR");
                });

            modelBuilder.Entity("Biblioteka.Core.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<int>("BookIndexNumber")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("B_INDEX_NUMBER");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BOOK_TYPE_ID");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR2(15)")
                        .HasColumnName("LANGUGE");

                    b.Property<bool?>("Status")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)")
                        .HasColumnName("TITLE");

                    b.Property<string>("YearofPublishment")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("NVARCHAR2(4)")
                        .HasColumnName("YEAR");

                    b.Property<bool>("isReturned")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("IS_RETURNED");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookTypeId");

                    b.ToTable("BOOK");
                });

            modelBuilder.Entity("Biblioteka.Core.BookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("BOOK_TYPE");
                });

            modelBuilder.Entity("Biblioteka.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("COUNTRY");
                });

            modelBuilder.Entity("Biblioteka.Core.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ADDRESS_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR2(40)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int>("NumberOfBooks")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBER_OF_BOOKS");

                    b.Property<int>("ReaderIndexNumber")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("R_INDEX_NUMBER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("READER");
                });

            modelBuilder.Entity("Biblioteka.Core.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BOOK_ID");

                    b.Property<long?>("Fine")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("FINE");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("IS_RETURNED");

                    b.Property<long?>("Overdue")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("OVERDUE_TIME");

                    b.Property<int>("ReaderId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("READER_ID");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("RENTAL_DATE");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("RETURN_DATE");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("RENTAL");
                });

            modelBuilder.Entity("Biblioteka.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("ROLE");
                });

            modelBuilder.Entity("Biblioteka.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR2(40)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("PASSWORD");

                    b.Property<int>("RoleId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Biblioteka.Core.Author", b =>
                {
                    b.HasOne("Biblioteka.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Biblioteka.Core.Book", b =>
                {
                    b.HasOne("Biblioteka.Core.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Biblioteka.Core.BookType", "BookType")
                        .WithMany()
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookType");
                });

            modelBuilder.Entity("Biblioteka.Core.Reader", b =>
                {
                    b.HasOne("Biblioteka.Core.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Biblioteka.Core.Rental", b =>
                {
                    b.HasOne("Biblioteka.Core.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Biblioteka.Core.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Biblioteka.Core.User", b =>
                {
                    b.HasOne("Biblioteka.Core.Role", "Role")
                        .WithOne()
                        .HasForeignKey("Biblioteka.Core.User", "RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
